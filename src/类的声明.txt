类修饰符
    abstract
    base
    final
    interface
    sealed
    mixin

属性定义 
    // 基本和对象一样
    赋值
        属性必须赋值, 或使用 late, 或使用 ?, 或在构造函数中赋值

    静态属性
        在最前面加一个 static 修饰符

方法定义: 
    // 基本和函数一样
    
    一般方法
        可以直接访问内部字段,
        若和参数冲突, 则可加上 this.

    静态方法
        在最前面加一个 static 修饰符,

        但内部只能访问其他 static 方法, 不能加 this, 
        且不能访问任何属性,

构造函数
    构造函数 特殊修饰符
        const
        factory

    一般形式
        和类同名的函数, 
        且不能标注返回值

    函数体
        内部使用
            和一般方法一样

        可省略
            即直接通过参数, 给属性赋值,
            但此时, 参数列表中的属性, 要加上 this.

    命名构造函数
        类似于类的 静态方法,
        除了在类名后加上 '.子名称' 外,
        和一般的构造函数相同

        调用时, 也要加上 '.子名称'

        示例
            class Person {
                Person(){...}
                Person.of(){...}
            }

    初始化列表
        // 构造函数参数列表 的右侧, 可以增加一些初始化操作的语句

        多操作
            初始化列表, 及可以以类似列表的形式, 进行多种初始化,
            甚至可以只用初始化列表, 不用函数体

            示例:
                Cat.foo(int x):
                    assert(x > 5),
                    super.of(x)
                {
                    ...
                }


        限制
            初始化列表中, 不能使用 this

        断言
            // 仅在开发模式下
            Foo(): assert()

        重定向 构造函数
            重定向 超类构造函数
                // 更改初始化函数
                Foo(x): super.bar(x) ...

            重定向 自身构造函数
                // 但无法更改超类,
                // 无法断言
                // 不能有函数体
                示例: Foo(): this.foo();

    常量构造函数
        属性要求:
            全为 final,
            要么声明时初始化, 要么在构造函数时初始化

        构造函数要求:
            调用的超类构造函数, 必须也是 常量构造函数,

            构造函数不能有函数体

        示例:
            class Dog extends Animal {
                final x;
                final y = 5;
                const Dog(this.x): Animal.static();
            }

    工厂构造函数
        特点:
            一般可以返回自身的对象,
            也可以返回子类的对象, 自身修改部分属性后的对象,

            工厂函数, 也可以有 命名构造函数,

            工厂构造函数中, 无法访问 this,
            只能访问其他工厂构造函数

运算符重载
    和一般函数区别:
        以 "operator 元素符" 为函数名的形式

    是否须重写:
        一般判断类符号, 如 ==, Object 中已经声明过了, 故子类声明时 需加上 @overide

        而一些运算符号, 如 +, Object 中没有声明, 可以直接声明

    函数参数:
        定义的运算符都为 双目运算符, 
        左表达式为当前对象, 右表达式为函数的参数

私有属性
    名称以 _ 开头的属性



继承
    单一父类
        class Child extends Father {}

    调用构造函数
        子类调用构造函数时, 
        会自动提前调用超类的 无参未命名构造函数

    重写
        定义: 重新定义父类已有的方法
        注解: @override
        返回值类型: 只能为原返回类型 自身, 或其任意层级的子类
        参数类型: 只能为原参数类型 自身, 或其任意层级的超类


抽象方法
    只有函数签名, 没有函数体,
    除了构造函数之外, 只能存在于 abstract class 或 mixin 中
